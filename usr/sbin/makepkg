#!/bin/sh
# Copyright 1994, 1998  Patrick Volkerding, Moorhead, Minnesota USA 
# Copyright 2003  Slackware Linux, Inc.  Concord, CA USA
# All rights reserved.
# Modified by David B. Cortarello (Nomius) to support lzma
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Wed Mar 18 15:32:33 CST 1998
# Patched to avoid possible symlink attacks in /tmp.

TAR=tar

make_install_script() {
  COUNT=1
  LINE="`sed -n "$COUNT p" $1`"
  while [ ! "$LINE" = "" ]; do
   LINKGOESIN="`echo "$LINE" | cut -f 1 -d " "`" 
   LINKGOESIN="`dirname $LINKGOESIN`" 
   LINKNAMEIS="`echo "$LINE" | cut -f 1 -d ' '`"
   LINKNAMEIS="`basename "$LINKNAMEIS"`"
   LINKPOINTSTO="`echo "$LINE" | cut -f 3 -d ' '`"
   echo "( cd $LINKGOESIN ; rm -rf $LINKNAMEIS )"
   echo "( cd $LINKGOESIN ; ln -sf $LINKPOINTSTO $LINKNAMEIS )"
   COUNT=`expr $COUNT + 1`
   LINE="`sed -n "$COUNT p" $1`"
  done
}

usage() {
  cat << EOF

Usage: makepkg package_name.tgz

Makes a Kwort compatible "*.tar.lzma" package containing the contents of the 
current and all subdirectories. If symbolic links exist, they will be removed
and an installation script will be made to recreate them later. This script
will be called "install/doinst.sh". You may add any of your own ash-compatible
shell scripts to this file and rebuild the package if you wish.

options:  -l, --linkadd y|n (moves symlinks into doinst.sh: recommended)
          -p, --prepend (prepend rather than append symlinks to an existing
                         doinst.sh.  Useful to link libraries needed by
                         programs in the doinst.sh script)
          -c, --chown y|n (resets all permissions to root:root 755
                           - not generally recommended)
          -z, --zip-man (compress with gzip the manpages in the package)
          -s, --strip (strip binaries and libraries in the package)

If these options are not set, makepkg will prompt as appropriate.
EOF
}

TMP=/tmp # This can be a hole, but I'm going to be careful about file
         # creation in there, so don't panic. :^)

# Parse options
while [ 0 ]; do
  if [ "$1" = "--linkadd" -o "$1" = "-l" ]; then
    if [ "$2" = "y" ]; then
      LINKADD=y
    elif [ "$2" = "n" ]; then
      LINKADD=n
    else
      usage
      exit 2
    fi
    shift 2
  elif [ "$1" = "--chown" -o "$1" = "-c" ]; then
    if [ "$2" = "y" ]; then
      CHOWN=y
    elif [ "$2" = "n" ]; then
      CHOWN=n
    else
      usage
      exit 2
    fi
    shift 2
  elif [ "$1" = "-p" -o "$1" = "--prepend" ]; then
    PREPEND=y
    shift 1
  elif [ "$1" = "-z" -o "$1" = " --zip-man" ]; then
    ZIP_MAN=y
    shift 1
  elif [ "$1" = "-s" -o "$1" = " --strip" ]; then
    STRIP=y
    shift 1
  elif [ "$1" = "-h" -o "$1" = "-H" -o "$1" = "--help" -o $# = 0 ]; then
    usage
    exit 0
  else
    break
  fi
done

echo
echo "Slackware package maker, version 2.1 adapted to Kwort."
PACKAGE_NAME=$1
# Sanity package name check
IFS="-"
sanity_pkgname_test=(${PACKAGE_NAME})
IFS=" "
if [ ${#sanity_pkgname_test[@]} -le 3 ]; then
 echo
 echo "Package name must be in the format: name-version-arch-buildauthor"
 echo
 exit 1
fi
TARGET_NAME="`dirname $PACKAGE_NAME`"
PACKAGE_NAME="`basename $PACKAGE_NAME`"
TAR_NAME="`basename $PACKAGE_NAME .tgz`"
echo
echo "Searching for symbolic links:"
# Get rid of possible pre-existing trouble:
INST=`mktemp $TMP/makepkg.XXXXXX`
# This requires the ls from coreutils-5.0 (or newer):
find . -type l -exec ls -l --time-style=long-iso {} \; | while read foo ; do echo $foo ; done | cut -f 8- -d ' ' | cut -b3- | tee $INST
if [ ! "`cat $INST`" = "" ]; then
  echo
  echo "Making symbolic link creation script:"
  make_install_script $INST | tee doinst.sh
fi
echo
if [ ! "`cat $INST`" = "" ]; then
  if [ -r install/doinst.sh ]; then
    echo "Unless your existing installation script already contains the code"
    echo "to create these links, you should append these lines to your existing"
    echo "install script. Now's your chance. :^)"
    echo
    echo "Would you like to add this stuff to the existing install script and"
    echo -n "remove the symbolic links ([y]es, [n]o)? "
  else
    echo "It is recommended that you make these lines your new installation script."
    echo
    echo "Would you like to make this stuff the install script for this package"
    echo -n "and remove the symbolic links ([y]es, [n]o)? "
  fi
  if [ ! "$LINKADD" ]; then
    read LINKADD;
    echo
  else
    echo $LINKADD
    echo
  fi
  if [ "$LINKADD" = "y" ]; then
    if [ -r install/doinst.sh ]; then
      UPDATE="t"
      if [ "$PREPEND" = "y" ]; then
        touch install/doinst.sh
        mv install/doinst.sh install/doinst.sh.shipped
        cat doinst.sh > install/doinst.sh
        echo "" >> install/doinst.sh
        cat install/doinst.sh.shipped >> install/doinst.sh
        rm -f install/doinst.sh.shipped
      else
        cat doinst.sh >> install/doinst.sh
      fi
    else
      mkdir -p install
      cat doinst.sh > install/doinst.sh
    fi
    echo
    echo "Removing symbolic links:"
    find . -type l -exec rm -v {} \;
    echo
    if [ "$UPDATE" = "t" ]; then
      if [ "$PREPEND" = "y" ]; then
        echo "Updating your ./install/doinst.sh (prepending symlinks)..."
      else
        echo "Updating your ./install/doinst.sh..."
      fi
    else
      echo "Creating your new ./install/doinst.sh..."
    fi
  fi
else
  echo "No symbolic links were found, so we won't make an installation script."
  echo "You can make your own later in ./install/doinst.sh and rebuild the"
  echo "package if you like."
fi
rm -f doinst.sh $INST
echo
echo "This next step is optional - you can set the directories in your package"
echo "to some sane permissions. If any of the directories in your package have"
echo "special permissions, then DO NOT reset them here!"
echo 
echo "Would you like to reset all directory permissions to 755 (drwxr-xr-x) and"
echo -n "directory ownerships to root.root ([y]es, [n]o)? "
if [ ! "$CHOWN" ]; then
  read CHOWN;
  echo
else
  echo $CHOWN
  echo
fi
if [ "$CHOWN" = "y" ]; then
  find . -type d -exec chmod -v 755 {} \; 
  find . -type d -exec chown -v root.root {} \;
  for x in usr/bin usr/sbin sbin usr/X11R6/bin; do
    chown -R root.bin ${x} 1> /dev/null 2> /dev/null
  done
fi

if [ "$MAN_ZIP" = "y" ]; then
  for x in usr/man usr/X11R6/man var/man /share/man local/man; do
    if [ -d ${x} ]; then
      gzip -9 ${x}/man?/*
    fi
  done
fi

if [ "$STRIP" = "y" ]; then
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "current ar archive" | cut -f 1 -d : | xargs strip --strip-debug 2> /dev/null
fi

echo
echo "Creating tar file $TAR_NAME.tar..."
echo
$TAR cvf $TAR_NAME.tar .
# Warn of zero-length files:
find . -type f -size 0c | while read file ; do
  echo "WARNING: zero length file $file"
done
find . -type f -name '*.gz' -size 20c | while read file ; do
  echo "WARNING: possible empty gzipped file $file"
done
echo "Compressing $TAR_NAME.tar..."
lzma $TAR_NAME.tar
if [ ! "$TARGET_NAME" = "." ]; then
  echo
  echo "Moving $PACKAGE_NAME to $TARGET_NAME..."
  mv "${PACKAGE_NAME}.tar.lzma" ${TARGET_NAME}
fi
echo
echo "Package creation complete."
echo
